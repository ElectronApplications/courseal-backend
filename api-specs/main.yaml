# TODO: actual error codes with description
# TODO: file splitting

openapi: 3.0.3
info:
  title: Courseal API
  description: API for the Courseal service
  version: 1.0.0
servers:
  - url: https://courseal.online/
tags:
  - name: auth
    description: Everything about authorization
  - name: public
    description: Requests that don't require the user to be authenticated
  - name: user
    description: Everything user related
  - name: course-management
    description: Everything about course management
  - name: course-enrollment
    description: Everything about course enrollment
paths:
  /api/courseal-info:
    get:
      tags:
        - public
      summary: Returns information about the currently running instance of Courseal
      description: This mostly includes customizable values
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Courseal server info
                type: object
                properties:
                  server_name:
                    type: string
                    description: The instance's name
                  server_description:
                    type: string
                    description: Description of the currently running instance
                  server_logo:
                    type: string
                    description: The URL leading to the instance's logo
                  server_sign_up_enabled:
                    type: boolean
                    description: Is registration of new accounts allowed on this instance
  /api/user/register:
    post:
      tags:
        - user
        - public
      summary: Creates a new account
      description: First checks if the account can be created. On creation returns a successful response.
      requestBody:
        content:
          application/json:
            schema:
              title: Registration info
              type: object
              properties:
                usertag:
                  type: string
                  description: The part of a "@usertag" without the "@" symbol. Can only contain "a-z", "0-9", and "_.-" symbols
                username:
                  type: string
                  description: The displayed username. Can be changed later
                password:
                  type: string
                  description: Plain-text password
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '403':
          description: Forbidden. This response is sent if registration of new accounts is disabled
        '409':
          description: Account already exists
  /api/auth/login:
    post:
      tags:
        - auth
        - public
      summary: Logins into account
      description: Checks if the provided account info matches and returns a pair of JWT and refresh token
      requestBody:
        content:
          application/json:
            schema:
              title: Login info
              type: object
              properties:
                usertag:
                  type: string
                  description: The usertag used during registration without the "@" symbol.
                password:
                  type: string
                  description: Plain-text password
        required: true
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                $ref: "#/components/schemas/refresh_token_cookie"
            "\0Set-Cookie":
              schema:
                $ref: "#/components/schemas/jwt_cookie"
        '409':
          description: Incorrect usertag or password
  /api/auth/refresh:
    get:
      tags:
        - auth
      summary: Refresh the JWT
      description: Uses refresh token to generate a new pair of JWT and refresh token. The old refresh token gets invalidated.
      parameters:
        - $ref: "#/components/parameters/refresh_token"
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                $ref: "#/components/schemas/refresh_token_cookie"
            "\0Set-Cookie":
              schema:
                $ref: "#/components/schemas/jwt_cookie"

        '401':
          description: Refresh token is invalid
  /api/auth/logout:
    get:
      tags:
        - auth
      summary: Logs out of the session
      description: Invalidates refresh token without generating a new one
      parameters:
        - $ref: "#/components/parameters/refresh_token"
      responses:
        '200':
          description: OK
        '401':
          description: Refresh token is invalid
components:
  parameters:
    refresh_token:
      in: header
      name: Refresh token cookie
      schema:
        type: string
        example: courseal_refresh=qwerty
    jwt:
      in: header
      name: JWT cookie
      schema:
        type: string
        example: courseal_jwt=ab.cd.ef
  schemas:
    refresh_token_cookie:
      type: string
      description: Cookie containing the generated refresh token
      example: courseal_refresh=qwerty; Path=/api/auth/refresh/; HttpOnly; Expires=123456
    jwt_cookie:
      type: string
      description: Cookie containing the generated JWT
      example: courseal_jwt=ab.cd.ef; Path=/api/; HttpOnly; Expires=123456
